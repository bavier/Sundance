<ParameterList name="CDR Simulation">


<!-- Name of output file. A .vtu or .pvtu suffix will be appended          -->
<Parameter name="Output Filename"   type="string"   value="cdr"/>

<!-- Model specification -->

<ParameterList name="Model">
  <!-- alpha=0 is a phase transition. With positive alpha, the field damps  -->
  <!-- very quickly with distance from a nonzero fluctuation. When alpha is -->
  <!-- negative, macroscopically large zones of nonzero order parameter can -->
  <!-- exist.                                                               -->
  <Parameter name="Alpha" type="double" value="-1.0"/>
  <!-- beta sets the magnitude of the nonzero constant solutions            -->
  <!-- psi(x)=beta/alpha. Positive and negative beta/alpha are the          -->
  <!-- minimizers of the Landau Hamiltonian reached in the limit            -->
  <!-- as D goes to zero.                                                   -->
  <Parameter name="Beta" type="double" value="1.0"/>
  <!-- D is the strength of the diffusion term                              -->
  <Parameter name="Diffusivity" type="double" value="0.01"/>
  <!-- Wavelength of fluctuations in psi at Dirichlet boundary              -->
  <Parameter name="BC Wavelength" type="double" value="0.45"/>
  <!-- Scale of advective velocity field                                    -->
  <Parameter name="Peak Velocity" type="double" value="0.025"/>
  <!-- Order of quadrature rule used on boundary surfaces                   -->
  <Parameter name="BC Quadrature Order" type="int" value="4"/>
</ParameterList>


<!-- Mesh specification -->
  <!-- Notes:                                                                       -->
  <!-- (1) don't change ax, bx, ay, or by just yet. The hardwired cell filters      -->
  <!--     in CubicCDR.cpp depend on these values. If you want to change them,      -->
  <!--     you'll have to modify the predicate definitions in CubicCDR.cpp.         -->
  <!-- (2) The parameters nx and ny are the numbers of elements in x and y          -->
  <!--     *per processor*. Holding them fixed as npx and npx increase will         -->
  <!--     increase the overall problem size.                                       -->
  <!-- (3) npx times npy must equal the number of processors                        -->
<ParameterList name="Mesh">
  <Parameter name="type" type="string" value="Rectangle"/>
  <Parameter name="nx" type="int" value="32"/>
  <Parameter name="npx" type="int" value="2"/>
  <Parameter name="ax" type="double" value="0.0"/>
  <Parameter name="bx" type="double" value="1.0"/>
  <Parameter name="ny" type="int" value="32"/>
  <Parameter name="npy" type="int" value="2"/>
  <Parameter name="ay" type="double" value="0.0"/>
  <Parameter name="by" type="double" value="1.0"/>
</ParameterList>


<!-- Nonlinear solver specification -->
<ParameterList name="Nonlinear Solver">

   <!-- Continuation parameters. It is a good idea to do continuation on the      -->
   <!-- nonlinear terms; a cold start from psi=0 when alpha and beta are large    -->
   <!-- will lead to convergence problems                                         -->
   <Parameter  name="Number of Continuation Steps"  type="int" value="10"/>

   <!-- NOX parameters -->
   <ParameterList name="NOX Solver">

      <Parameter name="Nonlinear Solver" type="string" value="Line Search Based"/>
      <ParameterList name="Line Search">
        <Parameter name="Method" type="string" value="More'-Thuente"/>
      </ParameterList>

      <ParameterList name="Status Test">
        <Parameter name="Max Iterations" type="int" value="25"/>
        <Parameter name="Tolerance" type="double" value="1e-8"/>
      </ParameterList>

      <!-- See the NOX documentation for printing settings.                -->
      <!-- 15=0xF prints pretty much everything.                           -->
      <ParameterList name="Printing">
        <Parameter name="Output Information" type="int" value="15"/>
      </ParameterList>

      <!-- use Aztec for linear solves -->
      <!-- Note: GMRES converges pretty slowly for this problem. BICGSTAB reduces the -->
      <!-- residual more quickly, but the resulting Newton steps are bad; presumably  -->
      <!-- BICGSTAB isn't actually reducing the error despite the residual reduction. -->
      <ParameterList name="Linear Solver">
        <Parameter name="Graph Fill" type="int" value="3"/>
        <Parameter name="Max Iterations" type="int" value="10000"/>
        <Parameter name="Restart" type="int" value="2000"/> 
        <Parameter name="Method" type="string" value="GMRES"/>
        <Parameter name="Precond" type="string" value="Domain Decomposition"/>
        <Parameter name="Subdomain Solver" type="string" value="ILU"/>
        <Parameter name="Tolerance" type="double" value="1e-8"/>
        <Parameter name="Type" type="string" value="Aztec"/>
        <Parameter name="Verbosity" type="int" value="1"/>
      </ParameterList>

   </ParameterList>
</ParameterList>

</ParameterList>
